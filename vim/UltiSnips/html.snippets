# Head
snippet "h(\d)" "inset html heads" r 
<h`!p snip.rv = int(match.group(1))`>${1:content}</h`!p snip.rv = int(match.group(1))`>
endsnippet

# Paragraph
snippet p "paragraph tag" b
<p>${1:paragraph_name}</p>
endsnippet

# href
snippet href "href tag" b
<a href="`xclip -o`">${VISUAL}</a>
endsnippet

# Anchor
snippet anchor "anchor" b
<a name="${1:anchor_name}">${2:name_content}</a>
endsnippet

# Table
global !p 
def table_insert(row,column):
    content=""
    for r in range(1,row+1):
        content+="<tr>\n"
        for c in range(1,column+1):
            if(r==1):
                tag="th"
            else:
                tag="td"
            content+="<"+tag+">0"+"</"+tag+">\n"
        content+="</tr>\n"
    return content
endglobal

snippet "table(\d)x(\d)" "expand a table (row)x(column)" r
<table border="${1:1}">
`!p snip.rv = table_insert(int(match.group(1)),int(match.group(2)))`
</table>
endsnippet

# <ol> and <ul>
global !p 
def list_insert(row):
    content=""
    for r in range(1,row+1):
        content+="<li>"+str(r)+"</li>\n"
    return content
endglobal

snippet "ul(\d)" "unordered list" r
<ul>
`!p snip.rv = list_insert(int(match.group(1)))`</ul>
endsnippet

snippet "ol(\d)" "ordered list" r
<ol>
`!p snip.rv = list_insert(int(match.group(1)))`</ol>
endsnippet

# Image
global !p 
import os
def img_loc(visual):
    content = ""
    if(visual==""):
        try:
            content = os.popen("xclip -o").read()
        except:
            content = "Failed"
    return content
def img_name(visual):
    content = ""
    if(visual==""):
        try:
            content = os.popen("xclip -o").read()
        except:
            content = "Failed"
    try:
        name = content.split("/")[-1]
    except:
        content = "Failed"
    return name
endglobal

snippet img "img tag with alt" b
<img src="${VISUAL}`!p snip.rv = img_loc(snip.v.text)`" alt="`!p snip.rv = img_name(snip.v.text)`" width="${3:100}" height="${4:100}">
endsnippet

# Comment
snippet comment "comment block" i
<!-- ${VISUAL} -->
endsnippet

# Background Color
snippet bgc "style background color" i 
style="background-color:${1:red}"
endsnippet

# Font
snippet font "style font-family" i 
style="font-family:${1:arial};color:red;font-size:20px;"
endsnippet

# Align
snippet align "style align" i 
style="text-align:${1:center}"
endsnippet

# Blockquote
snippet blockquote "blockquote" b
<blockquote cite="`xclip -o`">
${VISUAL}
</blockquote>
endsnippet

# Abbreviation
snippet abbr "abbreviation" i
<abbr title="${1:World Health Organization}">${2:WHO}</abbr>
endsnippet

# Code snippet code "code block with pre" b
<code>
<pre>
var person = {
	firstName:"Bill",
	lastName:"Gates",
	age:50,
	eyeColor:"blue"
}
</pre>
</code>
endsnippet

# Equation
snippet equation "equation(variable)" i
<var>E</var> = <var>m</var><var>c</var><sup>2</sup>
endsnippet

# Style
snippet style "style define block" b
<style>
.${1:style_name} {
background-color:black;
color:white;
margin:20px;
padding:20px;
} 
</style>

<body>
<div class=$1>
</div>
</body>
endsnippet

# Style (Span)
snippet style_span "style define block for span" b
<style>
	span.${1:style_name} {color:red;}
</style>

<body>
<h1>My <span class="$1">Important</span> Heading</h1>
</body>
endsnippet

